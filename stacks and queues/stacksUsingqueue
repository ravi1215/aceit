Time complexity:
pop, top and empty are O(1), push is O(n)

Space complexity: O(n)

Using 1 queue -


    queue<int> q;
    MyStack() {}

    void push(int x) {
        q.push(x);
        for (int i = 0; i < q.size() - 1; i++) {
            q.push(q.front());
            q.pop();
        }
    }

    int pop() {
        int top = q.front();
        q.pop();
        return top;
    }

    int top() {
        return q.front();
    }

    bool empty() {
        return q.empty();
    }


using 2 queue - 

    queue<int> q1;
    queue<int> q2;
    MyStack() {}

    void push(int x) {
        q1.push(x);
    }

    int pop() {
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }

        int poppedVal = q1.front();
        q1.pop();
        swap(q1, q2);

        return poppedVal;
    }

    int top() {
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }

        int topVal = q1.front();
        q2.push(q1.front());
        q1.pop();
        sswap(q1, q2);

        return topVal;
    }

    bool empty() {
        return q1.empty();
    }

Brute force solution-

Time Complexity: O(N^2) 

Space Complexity: O(1).

        min(leftmax, rightmax) - arr[i];

int trap(vector < int > & arr) {
  int n = arr.size();
  int waterTrapped = 0;
  for (int i = 0; i < n; i++) {
    int j = i;
    int leftMax = 0, rightMax = 0;
    while (j >= 0) {
      leftMax = max(leftMax, arr[j]);
      j--;
    }
    j = i;
    while (j < n) {
      rightMax = max(rightMax, arr[j]);
      j++;
    }
    waterTrapped += min(leftMax, rightMax) - arr[i];
  }
  return waterTrapped;
}


Better solution -

using prefix array to get leftmax and suffix to get rightmax array

int trap(vector < int > & arr) {
  int n = arr.size();
  int prefix[n], suffix[n];
  prefix[0] = arr[0];
  for (int i = 1; i < n; i++) {
    prefix[i] = max(prefix[i - 1], arr[i]);
  }
  suffix[n - 1] = arr[n - 1];
  for (int i = n - 2; i >= 0; i--) {
    suffix[i] = max(suffix[i + 1], arr[i]);
  }
  int waterTrapped = 0;
  for (int i = 0; i < n; i++) {
    waterTrapped += min(prefix[i], suffix[i]) - arr[i];
  }
  return waterTrapped;
}


Time Complexity: O(N) 

Space Complexity: O(2N) 


Using montonic stack - 

int trap(vector<int>& height) {
    int n = height.size();
    if (n == 0) return 0; // Edge case: Empty array

    int water = 0;                // Total water trapped
    stack<int> stack;             // Stack to store indices of heights

    for (int right = 0; right < n; right++) {
        // Process current height
        while (!stack.empty() && height[right] > height[stack.top()]) {
            int mid = stack.top(); // Top of the stack is the "bottom" of the trapped water
            stack.pop();           // Pop it from the stack

            if (stack.empty()) break; // No left boundary to trap water

            int left = stack.top();                 // Next element in stack is the left boundary
            int width = right - left - 1;           // Width of the water trap
            int boundedHeight = min(height[left], height[right]) - height[mid]; // Height of trapped water
            water += width * boundedHeight;         // Add trapped water
        }
        stack.push(right); // Push current index onto the stack
    }

    return water; // Return total trapped water
}

Time Complexity: O(N) 

Space Complexity: O(N) 



Optimal Solution- Two pinter approach

int trap(vector < int > & height) {
  int n = height.size();
  int left = 0, right = n - 1;
  int res = 0;
  int maxLeft = 0, maxRight = 0;
  while (left <= right) {
    if (height[left] <= height[right]) {
      if (height[left] >= maxLeft) {
        maxLeft = height[left];
      } else {
        res += maxLeft - height[left];
      }
      left++;
    } else {
      if (height[right] >= maxRight) {
        maxRight = height[right];
      } else {
        res += maxRight - height[right];
      }
      right--;
    }
  }
  return res;
}

Time Complexity: O(N) 

Space Complexity: O(1) 
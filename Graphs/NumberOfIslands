easy hai try bfs way =>

TC - O(N*M) ye dono dfs and bfs ki hai

aur => 
If the grid is small, both work fine.

If recursion depth is an issue, BFS is preferred.

If memory (queue size) is an issue, DFS (iterative) is better.

also dfs ke time grid ko reference (&) se pass karna, warna uski copy banti rahengi har dfs call par aur TLE aa sakta hai.


 void bfs(int row, int col, vector<vector<int>>& vis, vector<vector<char>> grid){
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int, int>> q;
        q.push({row, col});
        int delrow[] = {-1,0, 1, 0};
        int delcol[] = {0,1,0,-1};
        
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            for(int i = 0; i<4; i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];

                if(nrow >= 0 && nrow < n && ncol >=0 && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == '1'){
                    q.push({nrow,ncol});
                    vis[nrow][ncol] = 1;
                } 
            }
        }
         
        
    }
 
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int cnt = 0;
        
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(!vis[i][j] && grid[i][j] == '1'){
                    cnt++;
                    bfs(i, j, vis, grid);
                }
            }
        }
        
        return cnt;
    }


ab dfs bhi easy hai - 

void dfs(int row, int col, vector<vector<int>>& vis, vector<vector<char>>& grid){
    int n = grid.size();
    int m = grid[0].size();
    vis[row][col] = 1;

    int delrow[] = {-1,0, 1, 0};
    int delcol[] = {0,1,0,-1};
    
    for(int i = 0; i<4; i++){
        int nrow = row + delrow[i];
        int ncol = col + delcol[i];

        if(nrow >= 0 && nrow < n && ncol >=0 && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == '1'){
            dfs(nrow, ncol, vis, grid);
        }     
    }    
}

int numIslands(vector<vector<char>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<int>> vis(n, vector<int>(m, 0));
    int cnt = 0;
    
    for(int i = 0; i<n; i++){
        for(int j = 0; j<m; j++){
            if(!vis[i][j] && grid[i][j] == '1'){
                cnt++;
                dfs(i, j, vis, grid);
            }
        }
    }
    
    return cnt;
}


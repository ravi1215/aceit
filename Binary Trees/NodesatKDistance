double BFS hai, pehle tree ko undirected graph jaise main change using unorederd map betweeen parent and child
next hamare paas visited unoredered map hai to track ki kis node ko visit kiya hai
and queue hai

void helper(TreeNode* root, unordered_map<TreeNode*, TreeNode*>& parent_track, TreeNode* target){
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(node->left){
                parent_track[node->left] = node;
                q.push(node->left); 
            }
             if(node->right){
                parent_track[node->right] = node;
                q.push(node->right); 
            }
        }
    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode* ,TreeNode*> parent_track;
        helper(root, parent_track, target);
        unordered_map<TreeNode* ,bool> visited;
        queue<TreeNode*> q;
        q.push(target);
        visited[target] = true;
        int curr_level = 0;

        while(!q.empty()){
            int size = q.size();
            //curr_level++;
            if(curr_level++ == k) break;

            for(int i = 0; i<size; i++){
                TreeNode* node = q.front();
                q.pop();
                if(node->left && !visited[node->left]){
                    q.push(node->left);
                    visited[node->left] = true;
                }
                if(node->right && !visited[node->right]){
                    q.push(node->right);
                    visited[node->right] = true;
                }

                if(parent_track[node] && !visited[parent_track[node]]){
                    q.push(parent_track[node]);
                    visited[parent_track[node]] = true;
                }
            }
        }

        vector<int> ans;
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            ans.push_back(node->val);
        }
        return ans;
    }
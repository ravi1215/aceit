LCS problem

2 methods hai -->

1.) sort karke O(NlogN) mein 

      longest = 0, count = 1;
      sort kardo arr ko 
      for i = 0 se n-1 tak
          if(arr[i] == arr[i+1]) continue;  matlab duplictes hai

          if(arr[i]+1 == arr[i+1]) count++;
          else{
            count ko reset kardo , count = 1;
            longest = max (longest, count);
          }

      last sunsequence ke liye bhi 
        longest = max (longest, count);
        return longest;

2.) using unordered hash map

     longest = 1;
     unordered_set<int> ans;

     for(int i = 0; i<nums.size(); i++){
            ans.insert(nums[i]);
        }
    
    for(auto it: ans){
            if(ans.find(it - 1) == ans.end()){                 agar element (a) se ek kam exist nhi karta to wo staring element hai 
                int count = 1;                                 subsequence ka 
                int x = it;
                while(ans.find(x + 1) != ans.end()){            check karte a+1, a+2 ... exist karte to count++ kar diya
                    x = x+1;
                    count = count+1;
                }
                longest = max(longest,count);                  aur longest nikal liya
            }
        }
        return longest;

isme TC and SC: worst case mai hogi O(N)   ~ O(3N)

1) Slow and Fast

ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* fast = head;
        ListNode* slow = head;

        for(int i = 0; i<n; i++){
            fast = fast->next;
        }

         if(fast == NULL) return head->next;

            while(fast->next != NULL){
                fast = fast->next;
                slow = slow->next;
            }

        slow->next = slow->next->next;
        return head;

    }


TC - O(N)

2) ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL) return NULL;
        ListNode* temp = head;
        int cnt = 0;
        while(temp!=NULL){
            temp = temp->next;
            cnt++;
        }

        int ans = cnt - n;
        temp = head;

        if(cnt == n){
            ListNode* Newhead = head->next;
            return Newhead;
        }

        while(temp!=NULL){
            ans--;
            if (ans == 0) {
                break;
            }
            temp = temp->next;
            
        }


        if (temp->next != NULL) { // Ensure temp->next is valid
        temp->next = temp->next->next;
       }
        return head;
    }
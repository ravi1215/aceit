TC: O(N + NLOGN)
sc: O(N)

easy hai take care od typecasting


struct Item {
        int value;
        int weight;
        double ratio;
    };

    // Comparator function to sort items by value-to-weight ratio in descending order
    static bool comp(const Item& a, const Item& b) {
        return a.ratio > b.ratio;
    }

    // Function to get the maximum total value in the knapsack
    double fractionalKnapsack(vector<int>& val, vector<int>& wt, int capacity) {
        int n = val.size();
        vector<Item> items(n);

        // Calculate value-to-weight ratio for each item
        for (int i = 0; i < n; i++) {
            items[i] = {val[i], wt[i], (double)val[i] / (double)wt[i]};
        }

        // Sort items based on value-to-weight ratio
        sort(items.begin(), items.end(), comp);

        double totalValue = 0.0; // To store the maximum total value
        int remainingCapacity = capacity;

        // Iterate through the items and fill the knapsack
        for (int i = 0; i < n; i++) {
            if (items[i].weight <= remainingCapacity) {
                // If the entire item can fit, take it
                totalValue += items[i].value;
                remainingCapacity -= items[i].weight;
            } else {
                // Take the fraction of the item that fits
                totalValue += items[i].ratio * remainingCapacity;
                break;
            }
        }

        return totalValue;
    }
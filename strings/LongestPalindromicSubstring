TC : O(N^2) FOR BOTH SOLUTION

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.


1st Approach - Dynamic Programming,  SC- O(N^2) 

string longestPalindrome(string s) {
        if(s.length() <= 1) return s;

        int maxi = 0;
        int start = 0, end = 0;

        vector<vector<bool>> dp(s.length(), vector<bool>(s.length(), false));
        
        for(int i = 0; i<s.length(); i++){
            dp[i][i] = true;
            for(int j = 0; j<i; j++){
                if(s[j] == s[i] && (i-j <= 2 || dp[j+1][i-1])){
                    dp[j][i] = true;
                    if(i-j+1 > maxi){
                        maxi = i-j+1;
                        start = j;
                        end = i;
                    }
                }
            }
        }

        return s.substr(start, end-start+1);
    }


2nd approach Expand around Center, SC- O(N^2) 

string expand(int l, int r, string &s){
        while(l>=0 && r<s.length() && s[l] == s[r]){
            l--;
            r++;
        }
        return s.substr(l+1, r-l-1);
    }

    string longestPalindrome(string s) {
        int n = s.length();
        string ans = "";

        for(int i = 0; i<n; i++){
            string odd = expand(i,i,s);
            if(odd.size() > ans.size()){
                ans = odd;
            }
            string even = expand(i,i+1,s);
            if(even.size() > ans.size()){
                ans = even;
            }
        }

        return ans;
    }